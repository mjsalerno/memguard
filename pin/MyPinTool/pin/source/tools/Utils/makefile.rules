##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines all the applications that will be run during the tests.
APP_ROOTS := cp-pin hello

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS := regvalue_utils

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS := regvallib

###### Place OS-specific definitions here ######

# Linux
ifeq ($(TARGET_OS),linux)
    APP_ROOTS += avx_check avx2_check tsx_check hello_dwarf4
    OBJECT_ROOTS += threadlib avx_check_$(TARGET) supports_avx supports_avx2 tsx_check_$(TARGET)
endif

# Windows
ifeq ($(TARGET_OS),windows)
    APP_ROOTS += avx_check avx2_check tsx_check
    OBJECT_ROOTS += threadlib avx_check_$(TARGET) supports_avx supports_avx2 tsx_check_$(TARGET)
endif

###### Handle exceptions here ######

# Linux
ifeq ($(TARGET_OS),linux)
    DWARF4_SUPPORTED := $(shell $(TOOLS_ROOT)/Utils/testGccVersion $(CXXPATH) 4.5)
    ifeq ($(DWARF4_SUPPORTED),1)
        APP_ROOTS := $(filter-out hello_dwarf4, $(APP_ROOTS))
    endif
endif


##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.

###### Special applications' build rules ######

# Linux
ifeq ($(TARGET_OS),linux)
    $(OBJDIR)hello$(EXE_SUFFIX): hello.c
	    $(APP_CC) $(APP_CXXFLAGS_NOOPT) $(DBG_INFO_CXX_ALWAYS) $(COMP_EXE)$@ $< $(APP_LDFLAGS_NOOPT) $(DBG_INFO_LD_ALWAYS) $(STATIC) $(APP_LIBS)
endif

# Windows

ifeq ($(TARGET_OS),windows)
# information on Windows when using cygwin-ssh.
# Therefore the compiled executables were added to the source control.
# See the original build rules commented out below
$(OBJDIR)hello_win$(EXE_SUFFIX): hello_win$(EXE_SUFFIX)-$(TARGET) hello_win.pdb-$(TARGET)
	cp hello_win$(EXE_SUFFIX)-$(TARGET) $(OBJDIR)hello_win$(EXE_SUFFIX)
	cp hello_win.pdb-$(TARGET) $(OBJDIR)hello_win.pdb

#$(OBJDIR)hello_win$(EXE_SUFFIX)-$(TARGET) $(OBJDIR)hello_win.pdb-$(TARGET): hello.c
#	$(CC) /Zi /Od /MT /Fe$(OBJDIR)hello_win$(EXE_SUFFIX)-$(TARGET) hello.c /D_STATIC_CPPLIB /link /DEBUG /PDB:$(OBJDIR)hello_win.pdb-$(TARGET)
endif

$(OBJDIR)hello_dwarf4$(EXE_SUFFIX): hello.c
	$(APP_CC) $(APP_CXXFLAGS_NOOPT) $(DBG_INFO_CXX_ALWAYS) $(COMP_EXE)$@ $< $(APP_LDFLAGS_NOOPT) $(DBG_INFO_LD_ALWAYS) $(STATIC) \
	$(APP_LIBS) $(DWARF4)

# The test application should be compiled wihtout any additional libraries,
# especially libpthread.so (on Linux) so omit the APP_LIBS variable.
$(OBJDIR)cp-pin$(EXE_SUFFIX): cp-pin.cpp
	$(APP_CXX) $(APP_CXXFLAGS) $(COMP_EXE)$@ $< $(APP_LDFLAGS) $(CXX_LPATHS) $(CXX_LIBS)

$(OBJDIR)avx_check$(EXE_SUFFIX): avx_check.c $(OBJDIR)avx_check_$(TARGET)$(OBJ_SUFFIX)
	$(APP_CC) $(APP_CXXFLAGS) $(COMP_EXE)$@ $^ $(APP_LDFLAGS)

$(OBJDIR)avx2_check$(EXE_SUFFIX): avx2_check.c $(OBJDIR)supports_avx2$(OBJ_SUFFIX)
	$(APP_CC) $(APP_CXXFLAGS) $(COMP_EXE)$@ $^ $(APP_LDFLAGS)

$(OBJDIR)tsx_check$(EXE_SUFFIX): tsx_check.c $(OBJDIR)tsx_check_$(TARGET)$(OBJ_SUFFIX)
	$(APP_CC) $(APP_CXXFLAGS) $(COMP_EXE)$@ $^ $(APP_LDFLAGS)

###### Special objects' build rules ######

$(OBJDIR)threadlib$(OBJ_SUFFIX): threadlib_$(OS_TYPE).c threadlib.h
	$(APP_CC) $(APP_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)regvalue_utils$(OBJ_SUFFIX): regvalue_utils.h

###### Special libs' build rules ######

$(OBJDIR)regvallib$(LIB_SUFFIX): $(OBJDIR)regvalue_utils$(OBJ_SUFFIX) $(OBJDIR)supports_avx$(OBJ_SUFFIX)
	$(ARCHIVER)$(OBJDIR)regvallib$(LIB_SUFFIX) $^
